<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DryIoc.Mvc</name>
    </assembly>
    <members>
        <member name="T:DryIoc.Mvc.DryIocMvc">
            <summary>Set of container extension methods to set HttpContext scope, register Controllers, 
            set DryIoc FilterProvider and set DryIoc container as dependency resolver.</summary>
            <example> <code lang="cs"><![CDATA[
            protected void Application_Start()
            {
                var container = new Container();
            
                // Enable basic MVC support. 
                container = container.WithMvc();
                
                // Optionally enable support for MEF Export/ImportAttribute with DryIoc.MefAttributedModel package. 
                // container = container.WithMefAttributedModel();
                // container.RegisterExports(new[] { typeof(MyMvcApp).Assembly });
            
                // Additional registrations go here ...
            }
            ]]></code></example>
        </member>
        <member name="M:DryIoc.Mvc.DryIocMvc.WithMvc(DryIoc.IContainer,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},DryIoc.IScopeContext,System.Func{System.Type,System.Boolean})">
            <summary>Creates new container from original one with <see cref="T:DryIoc.Web.HttpContextScopeContext"/>.
            Then registers MVC controllers in container, 
            sets <see cref="T:DryIoc.Mvc.DryIocFilterAttributeFilterProvider"/> as filter provider,
            and at last sets container as <see cref="T:System.Web.Mvc.DependencyResolver"/>.</summary>
            <param name="container">Original container.</param>
            <param name="controllerAssemblies">(optional) By default uses <see cref="M:System.Web.Compilation.BuildManager.GetReferencedAssemblies"/>.</param>
            <param name="scopeContext">(optional) Specific scope context to use, by default MVC uses <see cref="T:DryIoc.Web.HttpContextScopeContext"/> 
            (if container does not have its own context specified).</param>
            <param name="throwIfUnresolved">(optional) Instructs DryIoc to throw exception
            for unresolved type instead of fallback to default Resolver.</param>
            <returns>New container with applied Web context.</returns>
        </member>
        <member name="M:DryIoc.Mvc.DryIocMvc.IsController(System.Type)">
            <summary>Helps to find if type is controller type.</summary>
            <param name="type">Type to check.</param>
            <returns>True if controller type</returns>
        </member>
        <member name="M:DryIoc.Mvc.DryIocMvc.GetReferencedAssemblies">
            <summary>Returns all application specific referenced assemblies (except from GAC and Dynamic).</summary>
            <returns>The assemblies.</returns>
        </member>
        <member name="M:DryIoc.Mvc.DryIocMvc.RegisterMvcControllers(DryIoc.IContainer,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>Registers controllers types in container with InWebRequest reuse.</summary>
            <param name="container">Container to register controllers to.</param>
            <param name="controllerAssemblies">(optional) Uses <see cref="M:System.Web.Compilation.BuildManager.GetReferencedAssemblies"/> by default.</param>
        </member>
        <member name="M:DryIoc.Mvc.DryIocMvc.SetFilterAttributeFilterProvider(DryIoc.IContainer,System.Collections.ObjectModel.Collection{System.Web.Mvc.IFilterProvider})">
            <summary>Replaces default Filter Providers with instance of <see cref="T:DryIoc.Mvc.DryIocFilterAttributeFilterProvider"/>,
            add in addition registers aggregated filter to container..</summary>
            <param name="container">Container to register to.</param>
            <param name="filterProviders">Original filter providers.</param>
        </member>
        <member name="M:DryIoc.Mvc.DryIocMvc.WithDataAnnotationsValidator(DryIoc.IContainer)">
            <summary>Registers both <see cref="T:DryIoc.Mvc.DryIocDataAnnotationsModelValidator"/> and
            <see cref="T:DryIoc.Mvc.DryIocValidatableObjectAdapter"/> and provides the <paramref name="container"/> to use
            as <see cref="T:System.IServiceProvider"/> for resolving dependencies.</summary>
            <param name="container"><see cref="T:System.IServiceProvider"/> implementaion.</param>
            <returns>Returns source container for fluent access.</returns>
        </member>
        <member name="T:DryIoc.Mvc.DryIocDependencyResolver">
            <summary>Resolver delegating to DryIoc container.</summary>
        </member>
        <member name="M:DryIoc.Mvc.DryIocDependencyResolver.#ctor(DryIoc.IResolver,System.Func{System.Type,System.Boolean})">
            <summary>Creates resolver from DryIoc resolver.</summary>
            <param name="resolver">DryIoc resolver (container interface).</param>
            <param name="throwIfUnresolved">(optional) Instructs DryIoc to throw exception
            for unresolved type instead of fallback to default Resolver.</param>
        </member>
        <member name="M:DryIoc.Mvc.DryIocDependencyResolver.GetService(System.Type)">
            <summary> Resolves singly registered services that support arbitrary object creation. </summary>
            <returns> The requested service or object. </returns>
            <param name="serviceType">The type of the requested service or object.</param>
        </member>
        <member name="M:DryIoc.Mvc.DryIocDependencyResolver.GetServices(System.Type)">
            <summary> Resolves multiply registered services. </summary>
            <returns> The requested services. </returns>
            <param name="serviceType">The type of the requested services.</param>
        </member>
        <member name="T:DryIoc.Mvc.DryIocFilterAttributeFilterProvider">
            <summary>Defines an filter provider for filter attributes. Uses DryIoc container to inject filter properties.</summary>
        </member>
        <member name="M:DryIoc.Mvc.DryIocFilterAttributeFilterProvider.#ctor(DryIoc.IContainer)">
            <summary>Creates filter provider.</summary> <param name="container"></param>
        </member>
        <member name="M:DryIoc.Mvc.DryIocFilterAttributeFilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
            <summary> Aggregates the filters from all of the filter providers into one collection. </summary>
            <returns> The collection filters from all of the filter providers. </returns>
            <param name="controllerContext">The controller context.</param><param name="actionDescriptor">The action descriptor.</param>
        </member>
        <member name="T:DryIoc.Mvc.DryIocServiceProvider">
            <summary>Service provider wrapping DryIoc <see cref="T:DryIoc.IResolver"/>.</summary>
        </member>
        <member name="M:DryIoc.Mvc.DryIocServiceProvider.#ctor(DryIoc.IResolver)">
            <summary>Constructs the wrapper over resolver</summary> <param name="resolver"></param>
        </member>
        <member name="M:DryIoc.Mvc.DryIocServiceProvider.GetService(System.Type)">
            <summary>Resolves the service for requested <paramref name="serviceType"/>.</summary>
            <param name="serviceType">Requested service type.</param> <returns>Resolved service object</returns>
        </member>
        <member name="T:DryIoc.Mvc.DryIocDataAnnotationsModelValidator">
            <summary>Provides a model validator and injects <see cref="T:System.IServiceProvider"/> 
            implemented by <see cref="T:DryIoc.Container"/>.</summary>
        </member>
        <member name="M:DryIoc.Mvc.DryIocDataAnnotationsModelValidator.#ctor(System.IServiceProvider,System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>Initializes a new instance of the  class.</summary>
            <param name="serviceProvider"><see cref="T:DryIoc.Container"/> to use for resolving dependencies.</param>
            <param name="metadata">The metadata for the model.</param>
            <param name="context">The controller context for the model.</param>
            <param name="attribute">The validation attribute for the model.</param>
        </member>
        <member name="M:DryIoc.Mvc.DryIocDataAnnotationsModelValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:DryIoc.Mvc.DryIocValidatableObjectAdapter">
            <summary>Provides an object adapter that can be validated,
            and injects <see cref="T:System.IServiceProvider"/> implementation as <see cref="T:DryIoc.Container"/>.</summary>
        </member>
        <member name="M:DryIoc.Mvc.DryIocValidatableObjectAdapter.#ctor(System.IServiceProvider,System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>Initializes a new instance of the class.</summary>
            <param name="serviceProvider"><see cref="T:DryIoc.Container"/> to use for resolving dependencies.</param>
            <param name="metadata">The model metadata.</param>
            <param name="context">The controller context.</param>
        </member>
        <member name="M:DryIoc.Mvc.DryIocValidatableObjectAdapter.Validate(System.Object)">
            <inheritdoc />
        </member>
    </members>
</doc>
